// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: node.proto

package filepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------------------
// Section Nodes are top level nodes
// -----------------------------------
type SectionNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*SectionNode_BlockContainers
	//	*SectionNode_HorizontalLayout
	//	*SectionNode_ColumnLayout_1
	//	*SectionNode_ColumnLayout_2
	//	*SectionNode_ColumnLayout_3
	//	*SectionNode_ColumnLayout_4
	//	*SectionNode_TableOfContentsBlock
	//	*SectionNode_BreadcrumbBlock
	Kind          isSectionNode_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SectionNode) Reset() {
	*x = SectionNode{}
	mi := &file_node_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SectionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionNode) ProtoMessage() {}

func (x *SectionNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionNode.ProtoReflect.Descriptor instead.
func (*SectionNode) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

func (x *SectionNode) GetKind() isSectionNode_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *SectionNode) GetBlockContainers() *BlockContainer {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_BlockContainers); ok {
			return x.BlockContainers
		}
	}
	return nil
}

func (x *SectionNode) GetHorizontalLayout() *HorizontalLayout {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_HorizontalLayout); ok {
			return x.HorizontalLayout
		}
	}
	return nil
}

func (x *SectionNode) GetColumnLayout_1() *ColumnLayout1 {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_ColumnLayout_1); ok {
			return x.ColumnLayout_1
		}
	}
	return nil
}

func (x *SectionNode) GetColumnLayout_2() *ColumnLayout2 {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_ColumnLayout_2); ok {
			return x.ColumnLayout_2
		}
	}
	return nil
}

func (x *SectionNode) GetColumnLayout_3() *ColumnLayout3 {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_ColumnLayout_3); ok {
			return x.ColumnLayout_3
		}
	}
	return nil
}

func (x *SectionNode) GetColumnLayout_4() *ColumnLayout4 {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_ColumnLayout_4); ok {
			return x.ColumnLayout_4
		}
	}
	return nil
}

func (x *SectionNode) GetTableOfContentsBlock() *TableOfContentsBlock {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_TableOfContentsBlock); ok {
			return x.TableOfContentsBlock
		}
	}
	return nil
}

func (x *SectionNode) GetBreadcrumbBlock() *BreadcrumbBlock {
	if x != nil {
		if x, ok := x.Kind.(*SectionNode_BreadcrumbBlock); ok {
			return x.BreadcrumbBlock
		}
	}
	return nil
}

type isSectionNode_Kind interface {
	isSectionNode_Kind()
}

type SectionNode_BlockContainers struct {
	// Section is a terminal node that transitions to Semantic Nodes
	BlockContainers *BlockContainer `protobuf:"bytes,128,opt,name=block_containers,json=blockContainers,proto3,oneof"`
}

type SectionNode_HorizontalLayout struct {
	HorizontalLayout *HorizontalLayout `protobuf:"bytes,129,opt,name=horizontal_layout,json=horizontalLayout,proto3,oneof"`
}

type SectionNode_ColumnLayout_1 struct {
	ColumnLayout_1 *ColumnLayout1 `protobuf:"bytes,130,opt,name=column_layout_1,json=columnLayout1,proto3,oneof"`
}

type SectionNode_ColumnLayout_2 struct {
	ColumnLayout_2 *ColumnLayout2 `protobuf:"bytes,131,opt,name=column_layout_2,json=columnLayout2,proto3,oneof"`
}

type SectionNode_ColumnLayout_3 struct {
	ColumnLayout_3 *ColumnLayout3 `protobuf:"bytes,132,opt,name=column_layout_3,json=columnLayout3,proto3,oneof"`
}

type SectionNode_ColumnLayout_4 struct {
	ColumnLayout_4 *ColumnLayout4 `protobuf:"bytes,133,opt,name=column_layout_4,json=columnLayout4,proto3,oneof"`
}

type SectionNode_TableOfContentsBlock struct {
	TableOfContentsBlock *TableOfContentsBlock `protobuf:"bytes,140,opt,name=table_of_contents_block,json=tableOfContentsBlock,proto3,oneof"`
}

type SectionNode_BreadcrumbBlock struct {
	BreadcrumbBlock *BreadcrumbBlock `protobuf:"bytes,141,opt,name=breadcrumb_block,json=breadcrumbBlock,proto3,oneof"`
}

func (*SectionNode_BlockContainers) isSectionNode_Kind() {}

func (*SectionNode_HorizontalLayout) isSectionNode_Kind() {}

func (*SectionNode_ColumnLayout_1) isSectionNode_Kind() {}

func (*SectionNode_ColumnLayout_2) isSectionNode_Kind() {}

func (*SectionNode_ColumnLayout_3) isSectionNode_Kind() {}

func (*SectionNode_ColumnLayout_4) isSectionNode_Kind() {}

func (*SectionNode_TableOfContentsBlock) isSectionNode_Kind() {}

func (*SectionNode_BreadcrumbBlock) isSectionNode_Kind() {}

type BlockContainer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*BlockNode           `protobuf:"bytes,16,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContainer) Reset() {
	*x = BlockContainer{}
	mi := &file_node_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContainer) ProtoMessage() {}

func (x *BlockContainer) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContainer.ProtoReflect.Descriptor instead.
func (*BlockContainer) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *BlockContainer) GetBlocks() []*BlockNode {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type HorizontalLayout struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockContainers []*BlockContainer      `protobuf:"bytes,128,rep,name=block_containers,json=blockContainers,proto3" json:"block_containers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HorizontalLayout) Reset() {
	*x = HorizontalLayout{}
	mi := &file_node_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HorizontalLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalLayout) ProtoMessage() {}

func (x *HorizontalLayout) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalLayout.ProtoReflect.Descriptor instead.
func (*HorizontalLayout) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *HorizontalLayout) GetBlockContainers() []*BlockContainer {
	if x != nil {
		return x.BlockContainers
	}
	return nil
}

type ColumnLayout1 struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BlockContainer *BlockContainer        `protobuf:"bytes,128,opt,name=block_container,json=blockContainer,proto3" json:"block_container,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ColumnLayout1) Reset() {
	*x = ColumnLayout1{}
	mi := &file_node_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnLayout1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnLayout1) ProtoMessage() {}

func (x *ColumnLayout1) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnLayout1.ProtoReflect.Descriptor instead.
func (*ColumnLayout1) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnLayout1) GetBlockContainer() *BlockContainer {
	if x != nil {
		return x.BlockContainer
	}
	return nil
}

type ColumnLayout2 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockContainers []*BlockContainer      `protobuf:"bytes,128,rep,name=block_containers,json=blockContainers,proto3" json:"block_containers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ColumnLayout2) Reset() {
	*x = ColumnLayout2{}
	mi := &file_node_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnLayout2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnLayout2) ProtoMessage() {}

func (x *ColumnLayout2) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnLayout2.ProtoReflect.Descriptor instead.
func (*ColumnLayout2) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnLayout2) GetBlockContainers() []*BlockContainer {
	if x != nil {
		return x.BlockContainers
	}
	return nil
}

type ColumnLayout3 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockContainers []*BlockContainer      `protobuf:"bytes,128,rep,name=block_containers,json=blockContainers,proto3" json:"block_containers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ColumnLayout3) Reset() {
	*x = ColumnLayout3{}
	mi := &file_node_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnLayout3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnLayout3) ProtoMessage() {}

func (x *ColumnLayout3) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnLayout3.ProtoReflect.Descriptor instead.
func (*ColumnLayout3) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{5}
}

func (x *ColumnLayout3) GetBlockContainers() []*BlockContainer {
	if x != nil {
		return x.BlockContainers
	}
	return nil
}

type ColumnLayout4 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockContainers []*BlockContainer      `protobuf:"bytes,128,rep,name=block_containers,json=blockContainers,proto3" json:"block_containers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ColumnLayout4) Reset() {
	*x = ColumnLayout4{}
	mi := &file_node_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnLayout4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnLayout4) ProtoMessage() {}

func (x *ColumnLayout4) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnLayout4.ProtoReflect.Descriptor instead.
func (*ColumnLayout4) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{6}
}

func (x *ColumnLayout4) GetBlockContainers() []*BlockContainer {
	if x != nil {
		return x.BlockContainers
	}
	return nil
}

type TableOfContentsBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableOfContentsBlock) Reset() {
	*x = TableOfContentsBlock{}
	mi := &file_node_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableOfContentsBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableOfContentsBlock) ProtoMessage() {}

func (x *TableOfContentsBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableOfContentsBlock.ProtoReflect.Descriptor instead.
func (*TableOfContentsBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{7}
}

func (x *TableOfContentsBlock) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

type BreadcrumbBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BreadcrumbBlock) Reset() {
	*x = BreadcrumbBlock{}
	mi := &file_node_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BreadcrumbBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreadcrumbBlock) ProtoMessage() {}

func (x *BreadcrumbBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreadcrumbBlock.ProtoReflect.Descriptor instead.
func (*BreadcrumbBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{8}
}

func (x *BreadcrumbBlock) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

// -----------------------------------
// BlockNode represent semantic grouping of content
// -----------------------------------
type BlockNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*BlockNode_ParagraphBlock
	//	*BlockNode_DividerBlock
	//	*BlockNode_CodeBlock
	//	*BlockNode_ListBlock
	//	*BlockNode_TodoListBlock
	//	*BlockNode_QuoteBlock
	Kind          isBlockNode_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockNode) Reset() {
	*x = BlockNode{}
	mi := &file_node_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockNode) ProtoMessage() {}

func (x *BlockNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockNode.ProtoReflect.Descriptor instead.
func (*BlockNode) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{9}
}

func (x *BlockNode) GetKind() isBlockNode_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *BlockNode) GetParagraphBlock() *ParagraphBlock {
	if x != nil {
		if x, ok := x.Kind.(*BlockNode_ParagraphBlock); ok {
			return x.ParagraphBlock
		}
	}
	return nil
}

func (x *BlockNode) GetDividerBlock() *DividerBlock {
	if x != nil {
		if x, ok := x.Kind.(*BlockNode_DividerBlock); ok {
			return x.DividerBlock
		}
	}
	return nil
}

func (x *BlockNode) GetCodeBlock() *CodeBlock {
	if x != nil {
		if x, ok := x.Kind.(*BlockNode_CodeBlock); ok {
			return x.CodeBlock
		}
	}
	return nil
}

func (x *BlockNode) GetListBlock() *ListBlock {
	if x != nil {
		if x, ok := x.Kind.(*BlockNode_ListBlock); ok {
			return x.ListBlock
		}
	}
	return nil
}

func (x *BlockNode) GetTodoListBlock() *TodoListBlock {
	if x != nil {
		if x, ok := x.Kind.(*BlockNode_TodoListBlock); ok {
			return x.TodoListBlock
		}
	}
	return nil
}

func (x *BlockNode) GetQuoteBlock() *QuoteBlock {
	if x != nil {
		if x, ok := x.Kind.(*BlockNode_QuoteBlock); ok {
			return x.QuoteBlock
		}
	}
	return nil
}

type isBlockNode_Kind interface {
	isBlockNode_Kind()
}

type BlockNode_ParagraphBlock struct {
	// Terminal Blocks
	ParagraphBlock *ParagraphBlock `protobuf:"bytes,17,opt,name=paragraph_block,json=paragraphBlock,proto3,oneof"`
}

type BlockNode_DividerBlock struct {
	DividerBlock *DividerBlock `protobuf:"bytes,18,opt,name=divider_block,json=dividerBlock,proto3,oneof"`
}

type BlockNode_CodeBlock struct {
	CodeBlock *CodeBlock `protobuf:"bytes,19,opt,name=code_block,json=codeBlock,proto3,oneof"`
}

type BlockNode_ListBlock struct {
	// Container Blocks
	ListBlock *ListBlock `protobuf:"bytes,65,opt,name=list_block,json=listBlock,proto3,oneof"`
}

type BlockNode_TodoListBlock struct {
	TodoListBlock *TodoListBlock `protobuf:"bytes,66,opt,name=todo_list_block,json=todoListBlock,proto3,oneof"`
}

type BlockNode_QuoteBlock struct {
	QuoteBlock *QuoteBlock `protobuf:"bytes,67,opt,name=quote_block,json=quoteBlock,proto3,oneof"`
}

func (*BlockNode_ParagraphBlock) isBlockNode_Kind() {}

func (*BlockNode_DividerBlock) isBlockNode_Kind() {}

func (*BlockNode_CodeBlock) isBlockNode_Kind() {}

func (*BlockNode_ListBlock) isBlockNode_Kind() {}

func (*BlockNode_TodoListBlock) isBlockNode_Kind() {}

func (*BlockNode_QuoteBlock) isBlockNode_Kind() {}

// Terminal Blocks
type ParagraphBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParagraphBlock) Reset() {
	*x = ParagraphBlock{}
	mi := &file_node_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParagraphBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphBlock) ProtoMessage() {}

func (x *ParagraphBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphBlock.ProtoReflect.Descriptor instead.
func (*ParagraphBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{10}
}

func (x *ParagraphBlock) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

type DividerBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DividerBlock) Reset() {
	*x = DividerBlock{}
	mi := &file_node_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DividerBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DividerBlock) ProtoMessage() {}

func (x *DividerBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DividerBlock.ProtoReflect.Descriptor instead.
func (*DividerBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{11}
}

type CodeBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      uint32                 `protobuf:"varint,13,opt,name=language,proto3" json:"language,omitempty"`
	Start         uint32                 `protobuf:"varint,14,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,15,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	mi := &file_node_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{12}
}

func (x *CodeBlock) GetLanguage() uint32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *CodeBlock) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CodeBlock) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

// Container blocks
type ListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         []*BlockNode           `protobuf:"bytes,16,rep,name=block,proto3" json:"block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListItem) Reset() {
	*x = ListItem{}
	mi := &file_node_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListItem) ProtoMessage() {}

func (x *ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListItem.ProtoReflect.Descriptor instead.
func (*ListItem) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{13}
}

func (x *ListItem) GetBlock() []*BlockNode {
	if x != nil {
		return x.Block
	}
	return nil
}

type ListBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Style         uint32                 `protobuf:"varint,13,opt,name=style,proto3" json:"style,omitempty"`
	ListItems     []*ListItem            `protobuf:"bytes,64,rep,name=list_items,json=listItems,proto3" json:"list_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlock) Reset() {
	*x = ListBlock{}
	mi := &file_node_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlock) ProtoMessage() {}

func (x *ListBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlock.ProtoReflect.Descriptor instead.
func (*ListBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{14}
}

func (x *ListBlock) GetStyle() uint32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *ListBlock) GetListItems() []*ListItem {
	if x != nil {
		return x.ListItems
	}
	return nil
}

type TodoListBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListItems     []*ListItem            `protobuf:"bytes,65,rep,name=list_items,json=listItems,proto3" json:"list_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TodoListBlock) Reset() {
	*x = TodoListBlock{}
	mi := &file_node_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TodoListBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoListBlock) ProtoMessage() {}

func (x *TodoListBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoListBlock.ProtoReflect.Descriptor instead.
func (*TodoListBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{15}
}

func (x *TodoListBlock) GetListItems() []*ListItem {
	if x != nil {
		return x.ListItems
	}
	return nil
}

type QuoteBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         []*BlockNode           `protobuf:"bytes,16,rep,name=block,proto3" json:"block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuoteBlock) Reset() {
	*x = QuoteBlock{}
	mi := &file_node_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteBlock) ProtoMessage() {}

func (x *QuoteBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteBlock.ProtoReflect.Descriptor instead.
func (*QuoteBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{16}
}

func (x *QuoteBlock) GetBlock() []*BlockNode {
	if x != nil {
		return x.Block
	}
	return nil
}

type HeaderBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        []*InlineNode          `protobuf:"bytes,1,rep,name=header,proto3" json:"header,omitempty"`
	Body          []*BlockNode           `protobuf:"bytes,16,rep,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderBlock) Reset() {
	*x = HeaderBlock{}
	mi := &file_node_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderBlock) ProtoMessage() {}

func (x *HeaderBlock) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderBlock.ProtoReflect.Descriptor instead.
func (*HeaderBlock) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{17}
}

func (x *HeaderBlock) GetHeader() []*InlineNode {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HeaderBlock) GetBody() []*BlockNode {
	if x != nil {
		return x.Body
	}
	return nil
}

// -----------------------------------
// InlineNode represent line content
// -----------------------------------
type InlineNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*InlineNode_Text
	//	*InlineNode_Image
	//	*InlineNode_Link
	//	*InlineNode_Mention
	//	*InlineNode_Equation
	//	*InlineNode_Code
	//	*InlineNode_CustomFormat
	//	*InlineNode_Bold
	//	*InlineNode_Italic
	//	*InlineNode_Underline
	//	*InlineNode_Strikethrough
	Kind          isInlineNode_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InlineNode) Reset() {
	*x = InlineNode{}
	mi := &file_node_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlineNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineNode) ProtoMessage() {}

func (x *InlineNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineNode.ProtoReflect.Descriptor instead.
func (*InlineNode) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{18}
}

func (x *InlineNode) GetKind() isInlineNode_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *InlineNode) GetText() *Text {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *InlineNode) GetImage() *Image {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *InlineNode) GetLink() *Link {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Link); ok {
			return x.Link
		}
	}
	return nil
}

func (x *InlineNode) GetMention() *Mention {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Mention); ok {
			return x.Mention
		}
	}
	return nil
}

func (x *InlineNode) GetEquation() *Equation {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Equation); ok {
			return x.Equation
		}
	}
	return nil
}

func (x *InlineNode) GetCode() *Code {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Code); ok {
			return x.Code
		}
	}
	return nil
}

func (x *InlineNode) GetCustomFormat() *CustomFormat {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_CustomFormat); ok {
			return x.CustomFormat
		}
	}
	return nil
}

func (x *InlineNode) GetBold() *Bold {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Bold); ok {
			return x.Bold
		}
	}
	return nil
}

func (x *InlineNode) GetItalic() *Italic {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Italic); ok {
			return x.Italic
		}
	}
	return nil
}

func (x *InlineNode) GetUnderline() *Underline {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Underline); ok {
			return x.Underline
		}
	}
	return nil
}

func (x *InlineNode) GetStrikethrough() *Strikethrough {
	if x != nil {
		if x, ok := x.Kind.(*InlineNode_Strikethrough); ok {
			return x.Strikethrough
		}
	}
	return nil
}

type isInlineNode_Kind interface {
	isInlineNode_Kind()
}

type InlineNode_Text struct {
	Text *Text `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type InlineNode_Image struct {
	Image *Image `protobuf:"bytes,3,opt,name=image,proto3,oneof"`
}

type InlineNode_Link struct {
	Link *Link `protobuf:"bytes,4,opt,name=link,proto3,oneof"`
}

type InlineNode_Mention struct {
	Mention *Mention `protobuf:"bytes,5,opt,name=mention,proto3,oneof"`
}

type InlineNode_Equation struct {
	Equation *Equation `protobuf:"bytes,6,opt,name=equation,proto3,oneof"`
}

type InlineNode_Code struct {
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3,oneof"`
}

type InlineNode_CustomFormat struct {
	CustomFormat *CustomFormat `protobuf:"bytes,8,opt,name=custom_format,json=customFormat,proto3,oneof"`
}

type InlineNode_Bold struct {
	Bold *Bold `protobuf:"bytes,9,opt,name=bold,proto3,oneof"`
}

type InlineNode_Italic struct {
	Italic *Italic `protobuf:"bytes,10,opt,name=italic,proto3,oneof"`
}

type InlineNode_Underline struct {
	Underline *Underline `protobuf:"bytes,11,opt,name=underline,proto3,oneof"`
}

type InlineNode_Strikethrough struct {
	Strikethrough *Strikethrough `protobuf:"bytes,12,opt,name=strikethrough,proto3,oneof"`
}

func (*InlineNode_Text) isInlineNode_Kind() {}

func (*InlineNode_Image) isInlineNode_Kind() {}

func (*InlineNode_Link) isInlineNode_Kind() {}

func (*InlineNode_Mention) isInlineNode_Kind() {}

func (*InlineNode_Equation) isInlineNode_Kind() {}

func (*InlineNode_Code) isInlineNode_Kind() {}

func (*InlineNode_CustomFormat) isInlineNode_Kind() {}

func (*InlineNode_Bold) isInlineNode_Kind() {}

func (*InlineNode_Italic) isInlineNode_Kind() {}

func (*InlineNode_Underline) isInlineNode_Kind() {}

func (*InlineNode_Strikethrough) isInlineNode_Kind() {}

type Bold struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bold) Reset() {
	*x = Bold{}
	mi := &file_node_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bold) ProtoMessage() {}

func (x *Bold) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bold.ProtoReflect.Descriptor instead.
func (*Bold) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{19}
}

func (x *Bold) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

type Italic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Italic) Reset() {
	*x = Italic{}
	mi := &file_node_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Italic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Italic) ProtoMessage() {}

func (x *Italic) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Italic.ProtoReflect.Descriptor instead.
func (*Italic) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{20}
}

func (x *Italic) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

type Underline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Underline) Reset() {
	*x = Underline{}
	mi := &file_node_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Underline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Underline) ProtoMessage() {}

func (x *Underline) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Underline.ProtoReflect.Descriptor instead.
func (*Underline) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{21}
}

func (x *Underline) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

type Strikethrough struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Strikethrough) Reset() {
	*x = Strikethrough{}
	mi := &file_node_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Strikethrough) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strikethrough) ProtoMessage() {}

func (x *Strikethrough) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strikethrough.ProtoReflect.Descriptor instead.
func (*Strikethrough) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{22}
}

func (x *Strikethrough) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

type CustomFormat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inline        []*InlineNode          `protobuf:"bytes,1,rep,name=inline,proto3" json:"inline,omitempty"`
	Format        uint32                 `protobuf:"varint,13,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomFormat) Reset() {
	*x = CustomFormat{}
	mi := &file_node_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFormat) ProtoMessage() {}

func (x *CustomFormat) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFormat.ProtoReflect.Descriptor instead.
func (*CustomFormat) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{23}
}

func (x *CustomFormat) GetInline() []*InlineNode {
	if x != nil {
		return x.Inline
	}
	return nil
}

func (x *CustomFormat) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

// Terminal Nodes
type Text struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,14,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,15,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_node_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{24}
}

func (x *Text) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Text) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,14,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,15,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_node_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{25}
}

func (x *Image) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Image) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_node_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{26}
}

func (x *Link) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Link) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Mention struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mention) Reset() {
	*x = Mention{}
	mi := &file_node_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mention) ProtoMessage() {}

func (x *Mention) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mention.ProtoReflect.Descriptor instead.
func (*Mention) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{27}
}

func (x *Mention) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Mention) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Mention) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type Equation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Kind          string                 `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Equation) Reset() {
	*x = Equation{}
	mi := &file_node_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Equation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equation) ProtoMessage() {}

func (x *Equation) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equation.ProtoReflect.Descriptor instead.
func (*Equation) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{28}
}

func (x *Equation) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Equation) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Equation) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type Code struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Language      string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Code) Reset() {
	*x = Code{}
	mi := &file_node_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{29}
}

func (x *Code) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Code) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Code) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

var File_node_proto protoreflect.FileDescriptor

var file_node_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x10, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3e,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x31, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x31, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x31, 0x12, 0x3e,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x32, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x32, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x32, 0x12, 0x3e,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x33, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x33, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x33, 0x12, 0x3e,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x34, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x34, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x34, 0x12, 0x54,
	0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x14,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75,
	0x6d, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d,
	0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63,
	0x72, 0x75, 0x6d, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x39, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x54, 0x0a, 0x10,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x40, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x80, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0x4f, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x31, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x32, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x80, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x33, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x80, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x0d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x34, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x80,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x14,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x74, 0x6f, 0x64,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x64, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x06, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x40, 0x10, 0x41, 0x22, 0x3a, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a,
	0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x31, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x50, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x40, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3e, 0x0a,
	0x0d, 0x54, 0x6f, 0x64, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d,
	0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x41, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x33, 0x0a,
	0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x5c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x83, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x71, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20,
	0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6f, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f,
	0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0x30, 0x0a, 0x04, 0x42, 0x6f, 0x6c, 0x64, 0x12, 0x28,
	0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x49, 0x74, 0x61, 0x6c,
	0x69, 0x63, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x35, 0x0a, 0x09,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x50,
	0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x2e, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x22, 0x2f, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x40, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x45, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x08, 0x45, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData []byte
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)))
	})
	return file_node_proto_rawDescData
}

var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_node_proto_goTypes = []any{
	(*SectionNode)(nil),          // 0: node.SectionNode
	(*BlockContainer)(nil),       // 1: node.BlockContainer
	(*HorizontalLayout)(nil),     // 2: node.HorizontalLayout
	(*ColumnLayout1)(nil),        // 3: node.ColumnLayout1
	(*ColumnLayout2)(nil),        // 4: node.ColumnLayout2
	(*ColumnLayout3)(nil),        // 5: node.ColumnLayout3
	(*ColumnLayout4)(nil),        // 6: node.ColumnLayout4
	(*TableOfContentsBlock)(nil), // 7: node.TableOfContentsBlock
	(*BreadcrumbBlock)(nil),      // 8: node.BreadcrumbBlock
	(*BlockNode)(nil),            // 9: node.BlockNode
	(*ParagraphBlock)(nil),       // 10: node.ParagraphBlock
	(*DividerBlock)(nil),         // 11: node.DividerBlock
	(*CodeBlock)(nil),            // 12: node.CodeBlock
	(*ListItem)(nil),             // 13: node.ListItem
	(*ListBlock)(nil),            // 14: node.ListBlock
	(*TodoListBlock)(nil),        // 15: node.TodoListBlock
	(*QuoteBlock)(nil),           // 16: node.QuoteBlock
	(*HeaderBlock)(nil),          // 17: node.HeaderBlock
	(*InlineNode)(nil),           // 18: node.InlineNode
	(*Bold)(nil),                 // 19: node.Bold
	(*Italic)(nil),               // 20: node.Italic
	(*Underline)(nil),            // 21: node.Underline
	(*Strikethrough)(nil),        // 22: node.Strikethrough
	(*CustomFormat)(nil),         // 23: node.CustomFormat
	(*Text)(nil),                 // 24: node.Text
	(*Image)(nil),                // 25: node.Image
	(*Link)(nil),                 // 26: node.Link
	(*Mention)(nil),              // 27: node.Mention
	(*Equation)(nil),             // 28: node.Equation
	(*Code)(nil),                 // 29: node.Code
}
var file_node_proto_depIdxs = []int32{
	1,  // 0: node.SectionNode.block_containers:type_name -> node.BlockContainer
	2,  // 1: node.SectionNode.horizontal_layout:type_name -> node.HorizontalLayout
	3,  // 2: node.SectionNode.column_layout_1:type_name -> node.ColumnLayout1
	4,  // 3: node.SectionNode.column_layout_2:type_name -> node.ColumnLayout2
	5,  // 4: node.SectionNode.column_layout_3:type_name -> node.ColumnLayout3
	6,  // 5: node.SectionNode.column_layout_4:type_name -> node.ColumnLayout4
	7,  // 6: node.SectionNode.table_of_contents_block:type_name -> node.TableOfContentsBlock
	8,  // 7: node.SectionNode.breadcrumb_block:type_name -> node.BreadcrumbBlock
	9,  // 8: node.BlockContainer.blocks:type_name -> node.BlockNode
	1,  // 9: node.HorizontalLayout.block_containers:type_name -> node.BlockContainer
	1,  // 10: node.ColumnLayout1.block_container:type_name -> node.BlockContainer
	1,  // 11: node.ColumnLayout2.block_containers:type_name -> node.BlockContainer
	1,  // 12: node.ColumnLayout3.block_containers:type_name -> node.BlockContainer
	1,  // 13: node.ColumnLayout4.block_containers:type_name -> node.BlockContainer
	18, // 14: node.TableOfContentsBlock.inline:type_name -> node.InlineNode
	18, // 15: node.BreadcrumbBlock.inline:type_name -> node.InlineNode
	10, // 16: node.BlockNode.paragraph_block:type_name -> node.ParagraphBlock
	11, // 17: node.BlockNode.divider_block:type_name -> node.DividerBlock
	12, // 18: node.BlockNode.code_block:type_name -> node.CodeBlock
	14, // 19: node.BlockNode.list_block:type_name -> node.ListBlock
	15, // 20: node.BlockNode.todo_list_block:type_name -> node.TodoListBlock
	16, // 21: node.BlockNode.quote_block:type_name -> node.QuoteBlock
	18, // 22: node.ParagraphBlock.inline:type_name -> node.InlineNode
	9,  // 23: node.ListItem.block:type_name -> node.BlockNode
	13, // 24: node.ListBlock.list_items:type_name -> node.ListItem
	13, // 25: node.TodoListBlock.list_items:type_name -> node.ListItem
	9,  // 26: node.QuoteBlock.block:type_name -> node.BlockNode
	18, // 27: node.HeaderBlock.header:type_name -> node.InlineNode
	9,  // 28: node.HeaderBlock.body:type_name -> node.BlockNode
	24, // 29: node.InlineNode.text:type_name -> node.Text
	25, // 30: node.InlineNode.image:type_name -> node.Image
	26, // 31: node.InlineNode.link:type_name -> node.Link
	27, // 32: node.InlineNode.mention:type_name -> node.Mention
	28, // 33: node.InlineNode.equation:type_name -> node.Equation
	29, // 34: node.InlineNode.code:type_name -> node.Code
	23, // 35: node.InlineNode.custom_format:type_name -> node.CustomFormat
	19, // 36: node.InlineNode.bold:type_name -> node.Bold
	20, // 37: node.InlineNode.italic:type_name -> node.Italic
	21, // 38: node.InlineNode.underline:type_name -> node.Underline
	22, // 39: node.InlineNode.strikethrough:type_name -> node.Strikethrough
	18, // 40: node.Bold.inline:type_name -> node.InlineNode
	18, // 41: node.Italic.inline:type_name -> node.InlineNode
	18, // 42: node.Underline.inline:type_name -> node.InlineNode
	18, // 43: node.Strikethrough.inline:type_name -> node.InlineNode
	18, // 44: node.CustomFormat.inline:type_name -> node.InlineNode
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	file_node_proto_msgTypes[0].OneofWrappers = []any{
		(*SectionNode_BlockContainers)(nil),
		(*SectionNode_HorizontalLayout)(nil),
		(*SectionNode_ColumnLayout_1)(nil),
		(*SectionNode_ColumnLayout_2)(nil),
		(*SectionNode_ColumnLayout_3)(nil),
		(*SectionNode_ColumnLayout_4)(nil),
		(*SectionNode_TableOfContentsBlock)(nil),
		(*SectionNode_BreadcrumbBlock)(nil),
	}
	file_node_proto_msgTypes[9].OneofWrappers = []any{
		(*BlockNode_ParagraphBlock)(nil),
		(*BlockNode_DividerBlock)(nil),
		(*BlockNode_CodeBlock)(nil),
		(*BlockNode_ListBlock)(nil),
		(*BlockNode_TodoListBlock)(nil),
		(*BlockNode_QuoteBlock)(nil),
	}
	file_node_proto_msgTypes[18].OneofWrappers = []any{
		(*InlineNode_Text)(nil),
		(*InlineNode_Image)(nil),
		(*InlineNode_Link)(nil),
		(*InlineNode_Mention)(nil),
		(*InlineNode_Equation)(nil),
		(*InlineNode_Code)(nil),
		(*InlineNode_CustomFormat)(nil),
		(*InlineNode_Bold)(nil),
		(*InlineNode_Italic)(nil),
		(*InlineNode_Underline)(nil),
		(*InlineNode_Strikethrough)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}
